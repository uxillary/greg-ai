import os
from dataclasses import dataclass, field

from trainer import Trainer, TrainerArgs

from TTS.config import load_config, register_config
from TTS.tts.datasets import load_tts_samples
from TTS.tts.models import setup_model

def clean_text(text):
    """Remove unwanted characters from text."""
    unwanted_chars = ["\n", "'", '"']  # Include double quotes
    for char in unwanted_chars:
        text = text.replace(char, "")
    return text

@dataclass
class TrainTTSArgs(TrainerArgs):
    config_path: str = field(default=None, metadata={"help": "Path to the config file."})

def main():
    """Run `tts` model training directly by a `config.json` file."""
    train_args = TrainTTSArgs()
    parser = train_args.init_argparse(arg_prefix="")
    args, config_overrides = parser.parse_known_args()
    train_args.parse_args(args)

    # Debugging
    print(f"args.config_path: {args.config_path}")
    print(f"args.continue_path: {args.continue_path}")

    # Load configuration
    config = None
    if args.config_path or args.continue_path:
        if args.config_path:
            config = load_config(args.config_path)
        elif args.continue_path:
            config = load_config(os.path.join(args.continue_path, "aj_config.json"))
        if len(config_overrides) > 0:
            config.parse_known_args(config_overrides, relaxed_parser=True)

    if not config:
        print("Configuration is not loaded. Exiting...")
        raise ValueError("Configuration could not be loaded. Please ensure '--config_path' is provided and valid.")
    
    # Debug dataset configuration
    print("Config loaded from file:", config)
    print("Dataset config:", config.datasets)

    # Validate 'language' field
    if "language" not in config.datasets[0] or not config.datasets[0]["language"].strip():
        raise ValueError("The 'language' field is missing or empty in the dataset configuration.")
    
    # Debug loaded language
    print(f"Loaded dataset language: '{config.datasets[0]['language']}'")

    # Ensure language is set correctly
    if config.datasets[0]["language"].strip().lower() != "English":
        raise ValueError("The dataset language must be set to 'English' for this model.")
    print(f"Loaded dataset language: {config.datasets[0]['language']}")

    # Handle unused multilingual parameters
    if hasattr(config, "TTS") and "is_multi_lingual" in config.TTS:
        print("Ignoring 'is_multi_lingual' for single-language training.")

    # Debugging: Print loaded config
    #print(f"Full loaded config: {config}"),
    #print(f"Loaded config: {config.datasets}")
    #print(f"Eval split size: {config.eval_split_size}")
    
    # Assign default formatter if not set
    for dataset in config.datasets:
        if dataset.formatter == '':
            dataset.formatter = "ljspeech"
        if dataset.path == '':
            dataset.path = "dataset/"
        if dataset.meta_file_train == '':
            dataset.meta_file_train = "metadata.csv"
        for dataset in config.datasets:
            dataset.language = "English"


    # Load training samples
    train_samples, eval_samples = load_tts_samples(
        config.datasets,
        eval_split=True,
        eval_split_max_size=config.eval_split_max_size,
        eval_split_size=0.05,
    )

    # Clean the text in training and evaluation samples
    for sample in train_samples:
        sample["text"] = clean_text(sample["text"])
    for sample in eval_samples:
        sample["text"] = clean_text(sample["text"])

    # init the model from config
    model = setup_model(config, train_samples + eval_samples)

    # init the trainer and ðŸš€
    trainer = Trainer(
        train_args,
        model.config,
        config.output_path,
        model=model,
        train_samples=train_samples,
        eval_samples=eval_samples,
        parse_command_line_args=False,
    )
    trainer.fit()


if __name__ == "__main__":
    main()